- name: Add ArgoCD Helm Repository
  kubernetes.core.helm_repository:
    name: argocd
    repo_url: https://argoproj.github.io/argo-helm
    state: present

- name: Create ArgoCD namespace
  kubernetes.core.k8s:
    name: "{{ argocd.namespace }}"
    api_version: v1
    kind: namespace
    state: present
    kubeconfig: "{{ kubeconfig_path }}"

- name: Create monitoring namespace
  kubernetes.core.k8s:
    name: "{{ prometheus.namespace }}"
    api_version: v1
    kind: namespace
    state: present
    kubeconfig: "{{ kubeconfig_path }}"

- name: Créer le secret Redis si nécessaire
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: argocd-redis
        namespace: "{{ argocd.namespace }}"
      type: Opaque
      stringData:
          auth: "unsecure_admin_password"
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    
- name: Install ArgoCD with Helm
  kubernetes.core.helm:
    name: argocd
    chart_ref: argocd/argo-cd
    release_namespace: "{{ argocd.namespace }}"
    create_namespace: true
    kubeconfig: "{{ kubeconfig_path }}"
    wait: true
    wait_timeout: 200s
    values:
      global:
        image:
          tag: "{{ argocd.version }}"
      config:
        secret:
          argocd_serv_admin_pass: "{{ argocd.admin_password | password_hash('bcrypt') }}"
        repositories: "{{ argocd.repositories }}"

      controller:
        metrics:
          enabled: true
          serviceMonitor:
            enabled: true
            namespace: "{{ prometheus.namespace }}"
      serv:
        metrics:
          enabled: true
          serviceMonitor:
            enabled: true
            namespace: "{{ prometheus.namespace }}"
                       
      repoServer:
        metrics:
          enabled: true
          serviceMonitor:
            enabled: true
            namespace: "{{ prometheus.namespace }}"

      cm:
        application.instanceLabelKey: argocd.argoproj.io/instance 
        exec.enabled: "true"

- name: Creation of repositories secrets
  kubernetes.core.k8s:
    definition:
      api_version: v1
      kind: Secret
      metadata:
        name: "{{ item.name }}-repo"
        namespace: "{{ argocd.namespace }}"
        labels:
          argocd.argoproj.io/secret-type: repository
      stringData:
        type: git
        url: "{{ item.url }}"
        name: "{{ item.name }}"
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
  loop: "{{ argocd.repositories }}"
  when: argocd.repositories is defined

- name: Wait for ArgoCD Serv
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: argocd-server
    namespace: "{{ argocd.namespace }}"
    kubeconfig: "{{ kubeconfig_path }}"
    wait: true
    wait_condition:
      type: Available
      status: true
    wait_timeout: 600

- name: Creation of argocd app
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'ecommerce.yml.j2') }}"
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
  when: ecommerce_app is defined
  
- name: Créer l'application Bootstrap (App of Apps)
  kubernetes.core.k8s:
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: "{{ argocd.bootstrap.name }}"
        namespace: "{{ argocd.namespace }}"
        finalizers:
          - resources-finalizer.argocd.argoproj.io
      spec:
        project: default
        source:
          repoURL: "{{ argocd.git_repo.url }}"
          targetRevision: HEAD
          path: "{{ argocd.bootstrap.path }}"
        destination:
          server: https://kubernetes.default.svc
          namespace: "{{ argocd.namespace }}"
        syncPolicy:
          automated:
            prune: "{{ argocd.bootstrap.auto_sync }}"
            selfHeal: "{{ argocd.bootstrap.self_heal }}"
            allowEmpty: false
          syncOptions:
            - CreateNamespace=true
          retry:
            limit: 5
            backoff:
              duration: 5s
              factor: 2
              maxDuration: 3m
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
  when: argocd.bootstrap.enabled

  - name: Attendre que l'application Bootstrap soit créée
  kubernetes.core.k8s_info:
    api_version: argoproj.io/v1alpha1
    kind: Application
    name: "{{ argocd.bootstrap.name }}"
    namespace: "{{ argocd.namespace }}"
    kubeconfig: "{{ kubeconfig_path }}"
    wait: true
    wait_timeout: 60
  when: argocd.bootstrap.enabled

- name: Afficher les informations de succès
  debug:
    msg:
      - "╔════════════════════════════════════════════════════════════╗"
      - "║  ✅ ArgoCD installé et configuré avec succès!              ║"
      - "╚════════════════════════════════════════════════════════════╝"
      - ""
      - "🔑 Accès ArgoCD:"
      - "  Port-forward: kubectl port-forward svc/argocd-server -n {{ argocd.namespace }} 8080:443"
      - "  URL: https://localhost:8080"
      - "  Username: admin"
      - "  Password: {{ argocd.admin_password }}"
      - ""
      - "📦 Application Bootstrap créée!"
      - "  ArgoCD déploie maintenant automatiquement toutes les applications"
      - ""
      - "🔍 Suivre le déploiement:"
      - "  kubectl get applications -n {{ argocd.namespace }} -w"
      - "  kubectl get pods --all-namespaces -w"
      - ""
      - "⏱️  Temps estimé de déploiement complet: 10-15 minutes"
      - ""
      - "📊 Applications qui seront déployées:"
      - "  Wave 0: PSA (Pod Security Admission)"
      - "  Wave 1: Gatekeeper + Falco"
      - "  Wave 2: Prometheus"
      - "  Wave 3: Grafana"
      - "  Wave 4: E-commerce App"