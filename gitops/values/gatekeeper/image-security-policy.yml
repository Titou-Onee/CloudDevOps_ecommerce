apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: k8simagepolicy
spec:
  crd:
    spec:
      names:
        kind: K8sImagePolicy
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8simagepolicy

        all_containers[container] {
            some c
            container := input.review.object.spec.containers[c]
        }
        all_containers[container] {
            some c
            container := input.review.object.spec.initContainers[c]
        }
        all_containers[container] {
            some c
            container := input.review.object.spec.ephemeralContainers[c]
        }

        violation[{"msg": msg}] {
          input.review.kind.kind == "Pod"
          container := all_containers[_]
          not startswith(image, "titouonee/")
          msg := sprintf("The image %q doesn't come from a certified registry ", [image])
        }

        violation[{"msg": msg}] {
          input.review.kind.kind == "Pod"
          container := all_containers[_]
          
          image_policy := container.imagePullPolicy
          image_tag := split(container.image, ":")[1]

          image_tag != "latest"
          image_policy == "Always"
          msg := sprintf("The container %q must have imagePullPolicy=Always", [input.review.object.spec.containers[c].name])
        }
---
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sImagePolicy
metadata:
  name: image-policy
spec:
  enforcementAction : dryrun
  match:
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
      - apiGroups: ["apps"]
        kinds: ["Deployment", "StatefulSet"]
    excludedNamespaces:
      - kube-system
#      - security